{"version":3,"sources":["components/Navbar.js","pages/Order.js","components/Home/BottomMenuItem.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["StyledWrapper","styled","div","PopoverContent","props","Item","Navbar","useState","setVisible","className","content","trigger","placement","arrowPointAtCenter","onVisibleChange","v","type","availableMenus","name","price","OrderPage","placeholder","map","menu","index","key","value","size","BottomMenuItem","onClick","onSelected","to","selected","icon","text","HomePage","setSelected","path","Order","App","Home","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"klBAIA,IAAMA,EAAgBC,IAAOC,IAAV,KAcbC,EAAiB,SAAAC,GACnB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAKC,KAAN,aACA,kBAAC,IAAKA,KAAN,iBA2BGC,EAtBA,SAAAF,GAAU,IAAD,EAEUG,oBAAS,GAFnB,mBAEJC,GAFI,WAIpB,OACI,kBAACR,EAAD,KACI,wBAAIS,UAAU,QAAd,gBACA,6BACI,kBAAC,IAAD,CACIC,QAAS,kBAAC,EAAD,MACTC,QAAQ,QACRC,UAAU,cACVC,oBAAkB,EAClBC,gBAAiB,SAACC,GAAD,OAAOP,EAAWO,KAEnC,kBAAC,IAAD,CAAMC,KAAK,a,qUCtC/B,IAAMhB,EAAgBC,IAAOC,IAAV,KAmBbe,EAAiB,CACnB,CACIC,KAAM,gBACNC,MAAO,IAEX,CACID,KAAM,UACNC,MAAO,KA6BAC,EAxBG,SAAAhB,GACd,OACI,kBAAC,EAAD,KACI,2BAAOK,UAAU,MACb,qCACA,kBAAC,IAAD,CAAOO,KAAK,OAAOK,YAAY,mBAG/BJ,EAAeK,KAAI,SAACC,EAAMC,GAAP,OACf,yBAAKC,IAAKD,EAAOf,UAAU,MACvB,6BAAMc,EAAKL,KAAX,KAAmBK,EAAKJ,MAAxB,kBACA,yBAAKV,UAAU,cACX,kBAAC,IAAD,CAAOO,KAAK,SAASU,MAAO,EAAGjB,UAAU,QACzC,kBAAC,IAAD,CAAQA,UAAU,UAAUO,KAAK,WAAjC,KACA,kBAAC,IAAD,CAAQP,UAAU,UAAUO,KAAK,UAAjC,UAKhB,kBAAC,IAAD,CAAQA,KAAK,UAAUW,KAAK,QAAQlB,UAAU,UAA9C,kB,6QCjDZ,IAAMT,EAAgBC,IAAOC,IAAV,KA0BJ0B,EAXQ,SAAAxB,GACnB,OACI,kBAAC,EAAD,CAAgByB,QAAS,WAAQzB,EAAM0B,eACnC,kBAAC,IAAD,CAAMC,GAAI,IAAM3B,EAAMc,KAAMT,UAAS,UAAKL,EAAM4B,UAAY,WAAvB,UACjC,kBAAC,IAAD,CAAMhB,KAAMZ,EAAM6B,OAClB,6BAAM7B,EAAM8B,S,wbClB5B,IAAMlC,EAAgBC,IAAOC,IAAV,KAoEJiC,EAtCE,SAAA/B,GAAU,IAAD,EAEUG,mBAAS,SAFnB,mBAEfyB,EAFe,KAELI,EAFK,KAItB,OACI,kBAAC,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,UACR,kBAACC,EAAD,QAGR,yBAAK7B,UAAU,cACX,kBAAC,EAAD,CACIS,KAAK,QACLe,KAAK,WACLC,KAAK,QACLF,SAAuB,UAAbA,EACVF,WAAY,kBAAMM,EAAY,YAElC,kBAAC,EAAD,CACIlB,KAAK,UACLe,KAAK,QACLC,KAAK,UACLF,SAAuB,YAAbA,EACVF,WAAY,kBAAMM,EAAY,cAElC,kBAAC,EAAD,CACIlB,KAAK,SACLe,KAAK,UACLC,KAAK,SACLF,SAAuB,WAAbA,EACVF,WAAY,kBAAMM,EAAY,gBCzCnCG,MAff,WACE,OACE,kBAAC,IAAD,KACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4B,KAAK,KACV,kBAACG,EAAD,WCPQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dd856d0f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Icon, Popover, Button, Menu } from 'antd';\n\nconst StyledWrapper = styled.div`\n    height: 30px;\n    display: flex;\n    padding: 10px;\n    justify-content: space-between;\n    align-items: center;\n    box-shadow: 1px 1px 5px 0px rgba(0,0,0,0.15);\n\n    h3 {\n        margin: 0;\n    }\n\n`;\n\nconst PopoverContent = props => {\n    return (\n        <Menu>\n            <Menu.Item>Home</Menu.Item>\n            <Menu.Item>Manage</Menu.Item>\n        </Menu>\n    )\n}\n\nconst Navbar = props => {\n\n    const [visible, setVisible] = useState(false);\n\n    return (\n        <StyledWrapper>\n            <h3 className='logo'>Take a Break</h3>\n            <div>\n                <Popover\n                    content={<PopoverContent />}\n                    trigger='click'\n                    placement='bottomRight'\n                    arrowPointAtCenter\n                    onVisibleChange={(v) => setVisible(v)}\n                >\n                    <Icon type='menu' />\n                </Popover>\n            </div>\n        </StyledWrapper>\n    )\n}\n\nexport default Navbar;","import React from 'react';\nimport styled from 'styled-components';\nimport { Input, Button } from 'antd';\n\nconst StyledWrapper = styled.div`\n    padding: 10px;\n\n    .mb {\n        margin-bottom: 10px;\n    }\n\n    .item-input {\n        display: flex;\n        .qty, .btn-add {\n            margin-right: 5px;\n        }\n    }\n\n    .button {\n        width: 100%;\n    }\n`;\n\nconst availableMenus = [\n    {\n        name: 'Chicken Fried',\n        price: 29\n    },\n    {\n        name: 'Smoothy',\n        price: 30\n    }\n]\n\n\nconst OrderPage = props => {\n    return (\n        <StyledWrapper>\n            <label className='mb'>\n                <div>Name</div>\n                <Input type='text' placeholder='Customer name' />\n            </label>\n            {\n                availableMenus.map((menu, index) => (\n                    <div key={index} className='mb'>\n                        <div>{menu.name} ({menu.price} Baht / piece)</div>\n                        <div className='item-input'>\n                            <Input type='number' value={0} className='qty'/>\n                            <Button className='btn-add' type='primary'>+</Button>\n                            <Button className='btn-sub' type='danger'>-</Button>\n                        </div>\n                    </div>\n                ))\n            }\n            <Button type='primary' size='large' className='button'>Create Order</Button>\n        </StyledWrapper>\n    )\n}\n\nexport default OrderPage;","import React from 'react';\nimport styled from 'styled-components';\nimport { Icon } from 'antd';\nimport { Link } from 'react-router-dom';\n\nconst StyledWrapper = styled.div`\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    \n    .link {\n        color: #000;\n    }\n\n    .link.selected {\n        color: var(--selected-color);\n    }\n    \n`\n\nconst BottomMenuItem = props => {\n    return (\n        <StyledWrapper  onClick={() => { props.onSelected() }}>\n            <Link to={'/' + props.name} className={`${props.selected && 'selected'} link`}>\n                <Icon type={props.icon} />\n                <div>{props.text}</div>\n            </Link>\n        </StyledWrapper>\n    )\n}\n\nexport default BottomMenuItem;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Input, Button, Icon } from 'antd';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport OrderPage from './Order';\nimport BottomMenuItem from '../components/Home/BottomMenuItem';\n\nconst StyledWrapper = styled.div`\n    position: relative;\n    height: calc(100vh - 30px);\n    .bottom-bar {\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 48px;\n\n        display: flex;\n        padding: 0 10px;\n        align-items: center;\n        justify-content: space-around;\n\n        box-shadow: 0px 0px 6px 0px rgba(0,0,0,0.15);\n    }\n`;\n\nconst availableMenus = [\n    {\n        name: 'Chicken Fried',\n        price: 29\n    },\n    {\n        name: 'Smoothy',\n        price: 30\n    }\n];\n\nconst HomePage = props => {\n\n    const [selected, setSelected] = useState('order');\n\n    return (\n        <StyledWrapper>\n            <Switch>\n                <Route path='/order'>\n                    <OrderPage />\n                </Route>\n            </Switch>\n            <div className='bottom-bar'>\n                <BottomMenuItem\n                    name='order'\n                    icon='snippets'\n                    text='Order'\n                    selected={selected === 'order'}\n                    onSelected={() => setSelected('order')}\n                />\n                <BottomMenuItem\n                    name='process'\n                    icon='inbox'\n                    text='Process'\n                    selected={selected === 'process'}\n                    onSelected={() => setSelected('process')}\n                />\n                <BottomMenuItem\n                    name='manage'\n                    icon='setting'\n                    text='Manage'\n                    selected={selected === 'manage'}\n                    onSelected={() => setSelected('manage')}\n                />\n            </div>\n        </StyledWrapper>\n    )\n}\n\nexport default HomePage;","import React from 'react';\nimport './index.css';\nimport 'antd/dist/antd.min.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport HomePage from './pages/Home';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route path='/'>\n            <HomePage/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}